"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importDefault(require("express"));
const reporting_controller_1 = tslib_1.__importDefault(require("../../controllers/reporting-controller"));
const id_param_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/id-param-validator"));
const safe_controller_function_1 = tslib_1.__importDefault(require("../../shared/safe-controller-function"));
const reporting_overview_controller_1 = tslib_1.__importDefault(require("../../controllers/reporting/overview/reporting-overview-controller"));
const reporting_info_controller_1 = tslib_1.__importDefault(require("../../controllers/reporting/reporting-info-controller"));
const reporting_allocation_controller_1 = tslib_1.__importDefault(require("../../controllers/reporting/reporting-allocation-controller"));
const reporting_projects_controller_1 = tslib_1.__importDefault(require("../../controllers/reporting/projects/reporting-projects-controller"));
const reporting_members_controller_1 = tslib_1.__importDefault(require("../../controllers/reporting/reporting-members-controller"));
const reportingApiRouter = express_1.default.Router();
reportingApiRouter.get("/info", (0, safe_controller_function_1.default)(reporting_info_controller_1.default.getInfo));
reportingApiRouter.get("/overview/statistics", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getStatistics));
reportingApiRouter.get("/overview/teams", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getTeams));
reportingApiRouter.get("/overview/projects", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getProjects));
reportingApiRouter.get("/overview/projects/:team_id", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getProjectsByTeamOrMember));
reportingApiRouter.get("/overview/members/:team_id", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getMembersByTeam));
reportingApiRouter.get("/overview/team/info/:team_id", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getTeamOverview));
reportingApiRouter.get("/overview/project/info/:project_id", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getProjectOverview));
reportingApiRouter.get("/overview/project/members/:project_id", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getProjectMembers));
reportingApiRouter.get("/overview/project/tasks/:project_id", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getProjectTasks));
reportingApiRouter.get("/overview/member/info", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getMemberOverview));
reportingApiRouter.get("/overview/team-member/info", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getTeamMemberOverview));
reportingApiRouter.get("/overview/member/tasks/:team_member_id", (0, safe_controller_function_1.default)(reporting_overview_controller_1.default.getMemberTasks));
reportingApiRouter.get("/projects", (0, safe_controller_function_1.default)(reporting_projects_controller_1.default.get));
reportingApiRouter.post("/project-timelogs", (0, safe_controller_function_1.default)(reporting_projects_controller_1.default.getProjectTimeLogs));
reportingApiRouter.get("/members", (0, safe_controller_function_1.default)(reporting_members_controller_1.default.getReportingMembers));
reportingApiRouter.post("/members/all", (0, safe_controller_function_1.default)(reporting_controller_1.default.getReportingMembers));
reportingApiRouter.post("/projects-by-member", (0, safe_controller_function_1.default)(reporting_controller_1.default.getProjectsByMember));
reportingApiRouter.get("/members/unassigned", (0, safe_controller_function_1.default)(reporting_controller_1.default.getUnAssignedUsers));
reportingApiRouter.get("/members/overdue/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(reporting_controller_1.default.getMembersWithOverDueTasks));
reportingApiRouter.get("/member/stats/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(reporting_controller_1.default.getReportingMemberStats));
reportingApiRouter.get("/member/overview/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(reporting_controller_1.default.getReportingMemberOverview));
reportingApiRouter.get("/member/projects", (0, safe_controller_function_1.default)(reporting_controller_1.default.getMemberProjects));
reportingApiRouter.get("/member/project", (0, safe_controller_function_1.default)(reporting_controller_1.default.getTasksByProject));
reportingApiRouter.get("/member/tasks", (0, safe_controller_function_1.default)(reporting_controller_1.default.getReportingMembersTasks));
reportingApiRouter.post("/", (0, safe_controller_function_1.default)(reporting_controller_1.default.create));
reportingApiRouter.post("/actual-vs-estimate", (0, safe_controller_function_1.default)(reporting_controller_1.default.getEstimatedVsActualTime));
reportingApiRouter.post("/allocation", (0, safe_controller_function_1.default)(reporting_allocation_controller_1.default.getAllocation));
reportingApiRouter.get("/allocation/teams", (0, safe_controller_function_1.default)(reporting_controller_1.default.getMyTeams));
reportingApiRouter.post("/allocation/categories", (0, safe_controller_function_1.default)(reporting_controller_1.default.getCategoriesByTeams));
reportingApiRouter.post("/allocation/projects", (0, safe_controller_function_1.default)(reporting_controller_1.default.getProjectsByTeams));
reportingApiRouter.get("/overview/export", (0, safe_controller_function_1.default)(reporting_controller_1.default.exportOverviewExcel));
reportingApiRouter.get("/allocation/export", (0, safe_controller_function_1.default)(reporting_controller_1.default.exportAllocation));
reportingApiRouter.get("/projects/export", (0, safe_controller_function_1.default)(reporting_controller_1.default.exportProjects));
reportingApiRouter.get("/members/export", (0, safe_controller_function_1.default)(reporting_controller_1.default.exportMembers));
reportingApiRouter.get("/members/single-member-task-stats", (0, safe_controller_function_1.default)(reporting_members_controller_1.default.getMemberTaskStats));
reportingApiRouter.get("/members/single-member-projects", (0, safe_controller_function_1.default)(reporting_members_controller_1.default.getSingleMemberProjects));
reportingApiRouter.get("/member-projects", (0, safe_controller_function_1.default)(reporting_members_controller_1.default.getMemberProjects));
reportingApiRouter.post("/members/single-member-activities", (0, safe_controller_function_1.default)(reporting_members_controller_1.default.getMemberActivities));
reportingApiRouter.post("/members/single-member-timelogs", (0, safe_controller_function_1.default)(reporting_members_controller_1.default.getMemberTimelogs));
reportingApiRouter.post("/time-reports/projects", (0, safe_controller_function_1.default)(reporting_allocation_controller_1.default.getProjectTimeSheets));
reportingApiRouter.post("/time-reports/members", (0, safe_controller_function_1.default)(reporting_allocation_controller_1.default.getMemberTimeSheets));
reportingApiRouter.post("/time-reports/estimated-vs-actual", (0, safe_controller_function_1.default)(reporting_allocation_controller_1.default.getEstimatedVsActual));
exports.default = reportingApiRouter;
