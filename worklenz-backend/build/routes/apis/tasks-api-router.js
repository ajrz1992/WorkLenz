"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importDefault(require("express"));
const tasks_controller_1 = tslib_1.__importDefault(require("../../controllers/tasks-controller"));
const gantt_tasks_query_params_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/gantt-tasks-query-params-validator"));
const gantt_tasks_range_params_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/gantt-tasks-range-params-validator"));
const id_param_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/id-param-validator"));
const kanban_status_update_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/kanban-status-update-validator"));
const tasks_body_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/tasks-body-validator"));
const quick_task_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/quick-task-validator"));
const bulk_tasks_status_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/bulk-tasks-status-validator"));
const bulk_tasks_priority_validators_1 = tslib_1.__importDefault(require("../../middlewares/validators/bulk-tasks-priority-validators"));
const bulk_tasks_phase_validators_1 = tslib_1.__importDefault(require("../../middlewares/validators/bulk-tasks-phase-validators"));
const bulk_tasks_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/bulk-tasks-validator"));
const map_tasks_to_bulk_update_1 = tslib_1.__importDefault(require("../../middlewares/map-tasks-to-bulk-update"));
const home_task_body_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/home-task-body-validator"));
const task_list_columns_controller_1 = tslib_1.__importDefault(require("../../controllers/task-list-columns-controller"));
const tasks_controller_v2_1 = tslib_1.__importDefault(require("../../controllers/tasks-controller-v2"));
const safe_controller_function_1 = tslib_1.__importDefault(require("../../shared/safe-controller-function"));
const tasksApiRouter = express_1.default.Router();
function getList(req, res) {
    if (tasks_controller_v2_1.default.isTasksOnlyReq(req.query))
        return tasks_controller_v2_1.default.getTasksOnly(req, res);
    return tasks_controller_v2_1.default.getList(req, res);
}
tasksApiRouter.post("/", tasks_body_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.create));
tasksApiRouter.get("/project/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.getTasksByProject));
tasksApiRouter.get("/roadmap", gantt_tasks_query_params_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.getGanttTasksByProject));
tasksApiRouter.get("/range", gantt_tasks_range_params_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.getTasksBetweenRange));
tasksApiRouter.get("/project/selected-tasks/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.getSelectedTasksByProject));
tasksApiRouter.get("/project/unselected-tasks/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.getUnselectedTasksByProject));
tasksApiRouter.get("/team", (0, safe_controller_function_1.default)(tasks_controller_1.default.getProjectTasksByTeam));
tasksApiRouter.get("/info", (0, safe_controller_function_1.default)(tasks_controller_1.default.getById));
tasksApiRouter.post("/convert", (0, safe_controller_function_1.default)(tasks_controller_v2_1.default.convertToTask));
tasksApiRouter.get("/kanban/:id", (0, safe_controller_function_1.default)(tasks_controller_1.default.getProjectTasksByStatus));
tasksApiRouter.get("/list/columns/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(task_list_columns_controller_1.default.getProjectTaskListColumns));
tasksApiRouter.put("/list/columns/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(task_list_columns_controller_1.default.toggleColumn));
tasksApiRouter.get("/list/v2/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(getList));
tasksApiRouter.get("/assignees/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.getProjectTaskAssignees));
tasksApiRouter.put("/bulk/status", map_tasks_to_bulk_update_1.default, bulk_tasks_status_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkChangeStatus));
tasksApiRouter.put("/bulk/priority", map_tasks_to_bulk_update_1.default, bulk_tasks_priority_validators_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkChangePriority));
tasksApiRouter.put("/bulk/phase", map_tasks_to_bulk_update_1.default, bulk_tasks_phase_validators_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkChangePhase));
tasksApiRouter.put("/bulk/delete", map_tasks_to_bulk_update_1.default, bulk_tasks_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkDelete));
tasksApiRouter.put("/bulk/archive", map_tasks_to_bulk_update_1.default, bulk_tasks_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkArchive));
tasksApiRouter.put("/bulk/assign-me", map_tasks_to_bulk_update_1.default, bulk_tasks_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkAssignMe));
tasksApiRouter.put("/bulk/label", map_tasks_to_bulk_update_1.default, bulk_tasks_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkAssignLabel));
tasksApiRouter.put("/bulk/members", map_tasks_to_bulk_update_1.default, bulk_tasks_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.bulkAssignMembers));
tasksApiRouter.put("/duration/:id", (0, safe_controller_function_1.default)(tasks_controller_1.default.updateDuration));
tasksApiRouter.put("/status/:status_id/:task_id", kanban_status_update_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.updateStatus));
tasksApiRouter.put("/:id", id_param_validator_1.default, tasks_body_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.update));
tasksApiRouter.delete("/:id", (0, safe_controller_function_1.default)(tasks_controller_1.default.deleteById));
tasksApiRouter.post("/quick-task", quick_task_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.createQuickTask));
tasksApiRouter.post("/home-task", home_task_body_validator_1.default, (0, safe_controller_function_1.default)(tasks_controller_1.default.createHomeTask));
tasksApiRouter.post("/convert-to-subtask", (0, safe_controller_function_1.default)(tasks_controller_v2_1.default.convertToSubtask));
tasksApiRouter.get("/subscribers/:id", (0, safe_controller_function_1.default)(tasks_controller_v2_1.default.getSubscribers));
exports.default = tasksApiRouter;
