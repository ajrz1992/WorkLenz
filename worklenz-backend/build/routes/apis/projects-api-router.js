"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importDefault(require("express"));
const projects_controller_1 = tslib_1.__importDefault(require("../../controllers/projects-controller"));
const id_param_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/id-param-validator"));
const projects_body_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/projects-body-validator"));
const team_owner_or_admin_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/team-owner-or-admin-validator"));
const safe_controller_function_1 = tslib_1.__importDefault(require("../../shared/safe-controller-function"));
const project_manager_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/project-manager-validator"));
const project_member_validator_1 = tslib_1.__importDefault(require("../../middlewares/validators/project-member-validator"));
const projectsApiRouter = express_1.default.Router();
projectsApiRouter.post("/", team_owner_or_admin_validator_1.default, projects_body_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.create));
projectsApiRouter.get("/", (0, safe_controller_function_1.default)(projects_controller_1.default.get));
projectsApiRouter.get("/my-task-projects", (0, safe_controller_function_1.default)(projects_controller_1.default.getMyProjectsToTasks));
projectsApiRouter.get("/my-projects", (0, safe_controller_function_1.default)(projects_controller_1.default.getMyProjects));
projectsApiRouter.get("/all", (0, safe_controller_function_1.default)(projects_controller_1.default.getAllProjects));
projectsApiRouter.get("/tasks", (0, safe_controller_function_1.default)(projects_controller_1.default.getAllTasks));
projectsApiRouter.get("/members/:id", (0, safe_controller_function_1.default)(projects_controller_1.default.getMembersByProjectId));
projectsApiRouter.get("/overview/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.getOverview));
projectsApiRouter.get("/overview-members/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.getOverviewMembers));
projectsApiRouter.get("/favorite/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.toggleFavorite));
projectsApiRouter.get("/archive/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.toggleArchive));
projectsApiRouter.get("/:id", id_param_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.getById));
projectsApiRouter.put("/update-pinned-view", project_member_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.updatePinnedView));
projectsApiRouter.put("/:id", project_manager_validator_1.default, id_param_validator_1.default, projects_body_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.update));
projectsApiRouter.delete("/:id", team_owner_or_admin_validator_1.default, id_param_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.deleteById));
projectsApiRouter.get("/archive-all/:id", team_owner_or_admin_validator_1.default, id_param_validator_1.default, (0, safe_controller_function_1.default)(projects_controller_1.default.toggleArchiveAll));
exports.default = projectsApiRouter;
